name: マンガ情報自動投稿

on:
  schedule:
    # UTC時間で設定（日本時間より9時間遅れ）
    # アダルトコンテンツに最適化した時間帯設定
    - cron: "30 3 * * 1-5" # 平日昼休み: UTC 3:30 (JST 12:30)
    - cron: "0 12 * * 1-5" # 平日夜: UTC 12:00 (JST 21:00)
    - cron: "30 14 * * 1-5" # 平日深夜: UTC 14:30 (JST 23:30)
    - cron: "0 15 * * 6,0" # 週末深夜: UTC 15:00 (JST 翌0:00)
    - cron: "0 17 * * 6,0" # 週末深夜2: UTC 17:00 (JST 翌2:00)
    - cron: "30 10 * * 6,0" # 週末夕方: UTC 10:30 (JST 19:30)

  # 手動実行のためのトリガー
  workflow_dispatch:

# ワークフローに書き込み権限を付与
permissions:
  contents: write

jobs:
  manga_post_job:
    runs-on: ubuntu-latest
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 全履歴を取得して確実に前回のデータにアクセスできるようにする
          # 明示的にトークンを指定して認証を強化
          token: ${{ github.token }}

      - name: Gitの設定
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Pythonをセットアップ
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      - name: 依存関係をインストール
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 環境変数の設定
        run: |
          echo "X_API_KEY=${{ secrets.X_API_KEY }}" >> .env
          echo "X_API_SECRET=${{ secrets.X_API_SECRET }}" >> .env
          echo "X_ACCESS_TOKEN=${{ secrets.X_ACCESS_TOKEN }}" >> .env
          echo "X_ACCESS_SECRET=${{ secrets.X_ACCESS_SECRET }}" >> .env
          echo "DMM_API_ID=${{ secrets.DMM_API_ID }}" >> .env
          echo "DMM_AFFILIATE_ID=${{ secrets.DMM_AFFILIATE_ID }}" >> .env
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> .env
          echo "OPENROUTER_MODEL=${{ secrets.OPENROUTER_MODEL }}" >> .env
          echo "OPENROUTER_SYSTEM_PROMPT=${{ secrets.OPENROUTER_SYSTEM_PROMPT }}" >> .env
          echo "OPENROUTER_USER_PROMPT_TEMPLATE=${{ secrets.OPENROUTER_USER_PROMPT_TEMPLATE }}" >> .env
          cat .env | grep -v "KEY\|SECRET\|TOKEN" # 機密情報以外の環境変数を表示

      - name: ワーキングディレクトリの確認
        run: |
          pwd
          ls -la

      - name: mangaデータの取得
        run: |
          python fetch_manga_data.py
          ls -la manga_data_raw.json || echo "manga_data_raw.json not found"

      - name: mangaデータの処理
        id: process_data
        run: |
          # より詳細なデバッグ情報を出力するようにする
          python -u process_manga_data.py

          # 結果の確認
          if [ -f "current_post.json" ]; then
            echo "current_post.json was successfully created"
            echo "::set-output name=post_created::true"
            cat current_post.json | head -20
          else
            echo "ERROR: current_post.json was not created!"
            echo "::set-output name=post_created::false"
            
            # フォールバック処理: 既存のselected_manga.jsonから簡易的なcurrent_post.jsonを生成
            if [ -f "selected_manga.json" ]; then
              echo "Creating fallback current_post.json from selected_manga.json"
              python -c "import json; data = json.load(open('selected_manga.json')); json.dump(data[0], open('current_post.json', 'w'), indent=2)" || echo "Failed to create fallback"
              
              if [ -f "current_post.json" ]; then
                echo "Fallback current_post.json created successfully"
                echo "::set-output name=post_created::true"
                cat current_post.json
              fi
            fi
          fi

          # ファイル一覧を表示して問題を診断
          ls -la *.json

      - name: Xに投稿
        if: steps.process_data.outputs.post_created == 'true'
        run: |
          if [ ! -f "current_post.json" ]; then
            echo "エラー: current_post.jsonが見つかりません。処理を中止します。"
            exit 1
          fi

          echo "current_post.jsonの内容:"
          cat current_post.json

          python post_to_x.py

      # 自動コミット処理の改善
      - name: 変更の確認
        id: check_changes
        run: |
          git status --porcelain
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "変更されたファイルが存在します"
            echo "::set-output name=has_changes::true"
          else
            echo "変更されたファイルはありません"
            echo "::set-output name=has_changes::false"
          fi

      # 変更がある場合のみ実行
      - name: 変更を手動でコミットとプッシュ
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "変更をコミットします..."
          git add last_processed_index.txt post_history.json x_posting.log current_post.json
          git commit -m "自動投稿: インデックスと履歴を更新 $(date +%Y-%m-%d)"
          git push

      # フォールバックとしてのgit-auto-commit-action
      - name: 自動コミット（フォールバック）
        if: steps.check_changes.outputs.has_changes == 'true' && failure()
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "自動投稿: インデックスと履歴を更新 $(date +%Y-%m-%d)"
          file_pattern: "last_processed_index.txt post_history.json x_posting.log current_post.json"
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "41898282+github-actions[bot]@users.noreply.github.com"
          commit_author: "GitHub Actions Bot <41898282+github-actions[bot]@users.noreply.github.com>"
          push_options: "--force"
          skip_checkout: true
